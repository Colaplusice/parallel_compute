#include<stdio.h>
#include<stdlib.h>
#include"mpi.h"

int main(int argc, char *argv[]){
        int rankID, totalNumTasks;

        MPI_Init(&argc, &argv);
        MPI_Barrier(MPI_COMM_WORLD);
        double elapsed_time = -MPI_Wtime();

        MPI_Comm_rank(MPI_COMM_WORLD, &rankID);
        MPI_Comm_size(MPI_COMM_WORLD, &totalNumTasks);

        int* gatherBuf = (int *)malloc(sizeof(int) * totalNumTasks);
        if(gatherBuf == NULL){
                printf("malloc error!");
                exit(-1);
                MPI_Finalize();
        }

        int sendBuf = rankID; //for each process, its rankID will be sent out

        int sendCount = 1;
        int recvCount = 1;
        int root = 0;
        MPI_Gather(&sendBuf, sendCount, MPI_INT, gatherBuf, recvCount, MPI_INT, root, MPI_COMM_WORLD);

        elapsed_time += MPI_Wtime();
        if(!rankID){
                int i;
                for(i = 0; i < totalNumTasks; i++){
                        printf("gatherBuf[%d] = %d, ", i, gatherBuf[i]);
                }
                putchar('\n');
                printf("total elapsed time = %10.6f\n", elapsed_time);
        }

        MPI_Finalize();
        return 0;
}
