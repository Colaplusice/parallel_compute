// 第一次.cpp: 定义控制台应用程序的入口点。
//矩阵求和
#include <stdio.h>
int a[25][25];
int b[25][25];
int **max;
int *M2;
int *M3;
int  s(int i, int j) {
	int t = (i - 1) % 26;
	int m = (j - 1) % 26;
	/* A B C D E F G H I J K L M N O P Q R S T U V W X Y Z */
	int sd[26][26] = {{ 4,-2, 0,-2,-1,-2, 0,-2,-1, 0,-1,-1,-1,-2, 0,-1,-1,-1, 1, 0, 0, 0,-3, 0,-2,-1 },
		/* B */{ -2, 4,-3, 4, 1,-3,-1, 0,-3, 0, 0,-4,-3, 3, 0,-2, 0,-1, 0,-1, 0,-3,-4,-1,-3, 1 },
		/* C */{ 0,-3, 9,-3,-4,-2,-3,-3,-1, 0,-3,-1,-1,-3, 0,-3,-3,-3,-1,-1, 0,-1,-2,-2,-2,-3 },
		/* D */{ -2, 4,-3, 6, 2,-3,-1,-1,-3, 0,-1,-4,-3, 1, 0,-1, 0,-2, 0,-1, 0,-3,-4,-1,-3, 1 },
		/* E */{ -1, 1,-4, 2, 5,-3,-2, 0,-3, 0, 1,-3,-2, 0, 0,-1, 2, 0, 0,-1, 0,-2,-3,-1,-2, 4 },
		/* F */{ -2,-3,-2,-3,-3, 6,-3,-1, 0, 0,-3, 0, 0,-3, 0,-4,-3,-3,-2,-2, 0,-1, 1,-1, 3,-3 },
		/* G */{ 0,-1,-3,-1,-2,-3, 6,-2,-4, 0,-2,-4,-3, 0, 0,-2,-2,-2, 0,-2, 0,-3,-2,-1,-3,-2 },
		/* H */{ -2, 0,-3,-1, 0,-1,-2, 8,-3, 0,-1,-3,-2, 1, 0,-2, 0, 0,-1,-2, 0,-3,-2,-1, 2, 0 },
		/* I */{ -1,-3,-1,-3,-3, 0,-4,-3, 4, 0,-3, 2, 1,-3, 0,-3,-3,-3,-2,-1, 0, 3,-3,-1,-1,-3 },
		/* J */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		/* K */{ -1, 0,-3,-1, 1,-3,-2,-1,-3, 0, 5,-2,-1, 0, 0,-1, 1, 2, 0,-1, 0,-2,-3,-1,-2, 1 },
		/* L */{ -1,-4,-1,-4,-3, 0,-4,-3, 2, 0,-2, 4, 2,-3, 0,-3,-2,-2,-2,-1, 0, 1,-2,-1,-1,-3 },
		/* M */{ -1,-3,-1,-3,-2, 0,-3,-2, 1, 0,-1, 2, 5,-2, 0,-2, 0,-1,-1,-1, 0, 1,-1,-1,-1,-1 },
		/* N */{ -2, 3,-3, 1, 0,-3, 0, 1,-3, 0, 0,-3,-2, 6, 0,-2, 0, 0, 1, 0, 0,-3,-4,-1,-2, 0 },
		/* O */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		/* P */{ -1,-2,-3,-1,-1,-4,-2,-2,-3, 0,-1,-3,-2,-2, 0, 7,-1,-2,-1,-1, 0,-2,-4,-2,-3,-1 },
		/* Q */{ -1, 0,-3, 0, 2,-3,-2, 0,-3, 0, 1,-2, 0, 0, 0,-1, 5, 1, 0,-1, 0,-2,-2,-1,-1, 3 },
		/* R */{ -1,-1,-3,-2, 0,-3,-2, 0,-3, 0, 2,-2,-1, 0, 0,-2, 1, 5,-1,-1, 0,-3,-3,-1,-2, 0 },
		/* S */{ 1, 0,-1, 0, 0,-2, 0,-1,-2, 0, 0,-2,-1, 1, 0,-1, 0,-1, 4, 1, 0,-2,-3, 0,-2, 0 },
		/* T */{ 0,-1,-1,-1,-1,-2,-2,-2,-1, 0,-1,-1,-1, 0, 0,-1,-1,-1, 1, 5, 0, 0,-2, 0,-2,-1 },
		/* U */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		/* V */{ 0,-3,-1,-3,-2,-1,-3,-3, 3, 0,-2, 1, 1,-3, 0,-2,-2,-3,-2, 0, 0, 4,-3,-1,-1,-2 },
		/* W */{ -3,-4,-2,-4,-3, 1,-2,-2,-3, 0,-3,-2,-1,-4, 0,-4,-2,-3,-3,-2, 0,-3,11,-2, 2,-3 },
		/* X */{ 0,-1,-2,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-2,-1,-1, 0, 0, 0,-1,-2,-1,-1,-1 },
		/* Y */{ -2,-3,-2,-3,-2, 3,-3, 2,-1, 0,-2,-1,-1,-2, 0,-3,-1,-2,-2,-2, 0,-1, 2,-1, 7,-2 },
		/* Z */{ -1, 1,-3, 1, 4,-3,-2, 0,-3, 0, 1,-3,-1, 0, 0,-1, 3, 0, 0,-1, 0,-2,-3,-1,-2, 4 } };
	return sd[t][m];
}
int Max(int i, int j) {
	if (i ==0) {
		max[i][j] = j*-8;
	    if (max[i][j]>M2[i])
	    {
	    M2[i]=max[i][j];
	    }
	    if (max[i][j]>M3[j])
	    {
	       M3[j]=max[i][j];
	    }
		return 0;
	}
	 if (j == 0) {
		max[i][j] = i*-8;
		 if (max[i][j]>M2[i])
	    {
	    M2[i]=max[i][j];
	    }
	    if (max[i][j]>M3[j])
	    {
	       M3[j]=max[i][j];
	    }
		return 0;
	}
			int ma1;
			int ma2 =M2[i]-8;
	     	int ma3 = M3[j]-8;
			ma1 = max[i-1][j-1] + s(i, j);
	 	max[i][j]= (ma1>ma2 ? (ma1 >ma3 ? ma1 : ma3) : (ma3 >ma2 ? ma3 : ma2));
	 if (max[i][j]>M2[i])
	    {
	    M2[i]=max[i][j];
	    }
	    if (max[i][j]>M3[i])
	    {
	       M3[j]=max[i][j];
	    }
	return 0;
}
void out() {
	printf("***********************************\n");
	for (int i = 0; i <=20; ++i)
	{
		for (int j =0; j<=10; ++j)
		{
             printf("%d\t",max[i][j] );
		}
	  printf("\n");
	}
}
int main()
{
	int s = 3000;
	max = new int*[s];
	M2=new int[s];
	M3=new int [s];
	for (int i = 0; i <s; i++)
	{
		max[i] = new int[s];
		for (int j = 0; j < s; j++)
		{
			max[i][j] =-100;
		}
		M2[i]=0;
		M3[i]=0;
	}
	int k=0;
	while(k<s){
		for (int i = 0; i <=k; i++)
		{
			Max(i, k-i);
		}
        	k++;
	}
	out();
	return 0;
}
