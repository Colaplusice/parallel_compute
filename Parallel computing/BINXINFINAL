#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#include <limits.h>
pthread_barrier_t b;
/* A B C D E F G H I J K L M N O P Q R S T U V W X Y Z */
int sd[26][26] = {{ 4,-2, 0,-2,-1,-2, 0,-2,-1, 0,-1,-1,-1,-2, 0,-1,-1,-1, 1, 0, 0, 0,-3, 0,-2,-1 },
    /* B */{ -2, 4,-3, 4, 1,-3,-1, 0,-3, 0, 0,-4,-3, 3, 0,-2, 0,-1, 0,-1, 0,-3,-4,-1,-3, 1 },
    /* C */{ 0,-3, 9,-3,-4,-2,-3,-3,-1, 0,-3,-1,-1,-3, 0,-3,-3,-3,-1,-1, 0,-1,-2,-2,-2,-3 },
    /* D */{ -2, 4,-3, 6, 2,-3,-1,-1,-3, 0,-1,-4,-3, 1, 0,-1, 0,-2, 0,-1, 0,-3,-4,-1,-3, 1 },
    /* E */{ -1, 1,-4, 2, 5,-3,-2, 0,-3, 0, 1,-3,-2, 0, 0,-1, 2, 0, 0,-1, 0,-2,-3,-1,-2, 4 },
    /* F */{ -2,-3,-2,-3,-3, 6,-3,-1, 0, 0,-3, 0, 0,-3, 0,-4,-3,-3,-2,-2, 0,-1, 1,-1, 3,-3 },
    /* G */{ 0,-1,-3,-1,-2,-3, 6,-2,-4, 0,-2,-4,-3, 0, 0,-2,-2,-2, 0,-2, 0,-3,-2,-1,-3,-2 },
    /* H */{ -2, 0,-3,-1, 0,-1,-2, 8,-3, 0,-1,-3,-2, 1, 0,-2, 0, 0,-1,-2, 0,-3,-2,-1, 2, 0 },
    /* I */{ -1,-3,-1,-3,-3, 0,-4,-3, 4, 0,-3, 2, 1,-3, 0,-3,-3,-3,-2,-1, 0, 3,-3,-1,-1,-3 },
    /* J */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    /* K */{ -1, 0,-3,-1, 1,-3,-2,-1,-3, 0, 5,-2,-1, 0, 0,-1, 1, 2, 0,-1, 0,-2,-3,-1,-2, 1 },
    /* L */{ -1,-4,-1,-4,-3, 0,-4,-3, 2, 0,-2, 4, 2,-3, 0,-3,-2,-2,-2,-1, 0, 1,-2,-1,-1,-3 },
    /* M */{ -1,-3,-1,-3,-2, 0,-3,-2, 1, 0,-1, 2, 5,-2, 0,-2, 0,-1,-1,-1, 0, 1,-1,-1,-1,-1 },
    /* N */{ -2, 3,-3, 1, 0,-3, 0, 1,-3, 0, 0,-3,-2, 6, 0,-2, 0, 0, 1, 0, 0,-3,-4,-1,-2, 0 },
    /* O */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    /* P */{ -1,-2,-3,-1,-1,-4,-2,-2,-3, 0,-1,-3,-2,-2, 0, 7,-1,-2,-1,-1, 0,-2,-4,-2,-3,-1 },
    /* Q */{ -1, 0,-3, 0, 2,-3,-2, 0,-3, 0, 1,-2, 0, 0, 0,-1, 5, 1, 0,-1, 0,-2,-2,-1,-1, 3 },
    /* R */{ -1,-1,-3,-2, 0,-3,-2, 0,-3, 0, 2,-2,-1, 0, 0,-2, 1, 5,-1,-1, 0,-3,-3,-1,-2, 0 },
    /* S */{ 1, 0,-1, 0, 0,-2, 0,-1,-2, 0, 0,-2,-1, 1, 0,-1, 0,-1, 4, 1, 0,-2,-3, 0,-2, 0 },
    /* T */{ 0,-1,-1,-1,-1,-2,-2,-2,-1, 0,-1,-1,-1, 0, 0,-1,-1,-1, 1, 5, 0, 0,-2, 0,-2,-1 },
    /* U */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    /* V */{ 0,-3,-1,-3,-2,-1,-3,-3, 3, 0,-2, 1, 1,-3, 0,-2,-2,-3,-2, 0, 0, 4,-3,-1,-1,-2 },
    /* W */{ -3,-4,-2,-4,-3, 1,-2,-2,-3, 0,-3,-2,-1,-4, 0,-4,-2,-3,-3,-2, 0,-3,11,-2, 2,-3 },
    /* X */{ 0,-1,-2,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-2,-1,-1, 0, 0, 0,-1,-2,-1,-1,-1 },
    /* Y */{ -2,-3,-2,-3,-2, 3,-3, 2,-1, 0,-2,-1,-1,-2, 0,-3,-1,-2,-2,-2, 0,-1, 2,-1, 7,-2 },
    /* Z */{ -1, 1,-3, 1, 4,-3,-2, 0,-3, 0, 1,-3,-1, 0, 0,-1, 3, 0, 0,-1, 0,-2,-3,-1,-2, 4 } };
int *M2;
int *M3;
int S;
int m[20];
int count;
int printrow;
void Init(){
      for (int i=0; i<S; i++) {
        M3[i*S+0]=i*-8;
        M3[0*S+i]=i*-8;
    } 
}
void *hello(void*rank){
     int my_rank=(int)rank;
    int k=1;
    while(k<S){
        k++; 
        for (int i=my_rank; i<k; i+=count) {
            int j=k-i;
            int ma1=M3[(i-1)*S+j-1]+sd[(i-1)%26][(j-1)%26];
            int ma2 = INT_MIN;
            int ma3 = INT_MIN;
            for(int k = 0; k < j; k++) {
                if(M3[i*S + k] + (j - k) * (j - k) >ma2)
                    ma2 = M3[i*S + k] + (j - k) * (j - k);
            }
            for(int k = 0; k < i; k++) {
                if(M3[k*S + j] + (i - k) * (i - k) >ma3)
                    ma3 = M3[k*S + j] + (i - k) * (i - k);
            }
            M3[i*S+j]= (ma1>ma2 ? (ma1 >ma3 ? ma1 : ma3) : (ma3 >ma2 ? ma3  :ma2));
        }
         pthread_barrier_wait(&b);
         
    }
        while(k>=S&&k<S*2){
            k++;
            for (int i =my_rank; i <=S; i+=count)
            {
                int j=k-i-1;
                int ma1=M3[(i-1)*S+j-1]+sd[(i-1)%26][(j-1)%26];
                int ma2 = INT_MIN;
                int ma3 = INT_MIN;
                if (i>=S||j>=S)
                {
                    continue;
                }
                for(int k = 0; k < j; k++) {
                    if(M3[i*S + k] + (j - k) * (j - k) >ma2)
                        ma2 = M3[i*S + k] + (j - k) * (j - k);
                }
                for(int k = 0; k < i; k++) {
                    if(M3[k*S + j] + (i - k) * (i - k) >ma3)
                        ma3 = M3[k*S + j] + (i - k) * (i - k);
                }
                M3[i*S+j]= (ma1>ma2 ? (ma1 >ma3 ? ma1 : ma3) : (ma3 >ma2 ? ma3  :ma2));
            }
        }
         pthread_barrier_wait(&b);
         return NULL;
    }
void OutM(int second){
        for (int j=0; j<S; j++) {
           printf("%d\t",M3[second*S+j]);
        }
}
int main(int argc,char *argv[])
{
    clock_t start,finish;
    double total_time;
    start=clock();
    count=atoi(argv[1]);
    int first=atoi(argv[2]);
    int second=atoi(argv[3]);
    S =first;
    M2=malloc(S*S*sizeof(int));
    M3=malloc(S*S*sizeof(int));
    pthread_t * all=malloc(count*sizeof(pthread_t));
        pthread_barrier_init(&b, 0, count);
        Init();
    for (int i=0; i<count; i++) {
        pthread_create(&all[i], NULL,hello,(void *)i+1);
    }
       for (int i=0; i<count; i++) {
        pthread_join(all[i],NULL);
    }
        
       pthread_barrier_destroy(&b);
   
    OutM(second);
    finish=clock();
    total_time=(double)(finish-start)/CLOCKS_PER_SEC;
    printf(" second:%f\n",total_time );
    return 0;
}
