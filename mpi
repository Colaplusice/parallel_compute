 // 第一次.cpp: 定义控制台应用程序的入口点。
//
/**@author : fjl2401 创建时间：2017年10月29日 下午1:26:56   
*/
#include <stdio.h>
#include "mpi.h"
//矩阵求和
int a[25][25];
int b[25][25];
int **max;
int  s(int i, int j) {
	int t = (i - 1) % 26;
	int m = (j - 1) % 26;
	/* A B C D E F G H I J K L M N O P Q R S T U V W X Y Z */
	int sd[26][26] = {/* A */{ 4,-2, 0,-2,-1,-2, 0,-2,-1, 0,-1,-1,-1,-2, 0,-1,-1,-1, 1, 0, 0, 0,-3, 0,-2,-1 },
		/* B */{ -2, 4,-3, 4, 1,-3,-1, 0,-3, 0, 0,-4,-3, 3, 0,-2, 0,-1, 0,-1, 0,-3,-4,-1,-3, 1 },
		/* C */{ 0,-3, 9,-3,-4,-2,-3,-3,-1, 0,-3,-1,-1,-3, 0,-3,-3,-3,-1,-1, 0,-1,-2,-2,-2,-3 },
		/* D */{ -2, 4,-3, 6, 2,-3,-1,-1,-3, 0,-1,-4,-3, 1, 0,-1, 0,-2, 0,-1, 0,-3,-4,-1,-3, 1 },
		/* E */{ -1, 1,-4, 2, 5,-3,-2, 0,-3, 0, 1,-3,-2, 0, 0,-1, 2, 0, 0,-1, 0,-2,-3,-1,-2, 4 },
		/* F */{ -2,-3,-2,-3,-3, 6,-3,-1, 0, 0,-3, 0, 0,-3, 0,-4,-3,-3,-2,-2, 0,-1, 1,-1, 3,-3 },
		/* G */{ 0,-1,-3,-1,-2,-3, 6,-2,-4, 0,-2,-4,-3, 0, 0,-2,-2,-2, 0,-2, 0,-3,-2,-1,-3,-2 },
		/* H */{ -2, 0,-3,-1, 0,-1,-2, 8,-3, 0,-1,-3,-2, 1, 0,-2, 0, 0,-1,-2, 0,-3,-2,-1, 2, 0 },
		/* I */{ -1,-3,-1,-3,-3, 0,-4,-3, 4, 0,-3, 2, 1,-3, 0,-3,-3,-3,-2,-1, 0, 3,-3,-1,-1,-3 },
		/* J */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		/* K */{ -1, 0,-3,-1, 1,-3,-2,-1,-3, 0, 5,-2,-1, 0, 0,-1, 1, 2, 0,-1, 0,-2,-3,-1,-2, 1 },
		/* L */{ -1,-4,-1,-4,-3, 0,-4,-3, 2, 0,-2, 4, 2,-3, 0,-3,-2,-2,-2,-1, 0, 1,-2,-1,-1,-3 },
		/* M */{ -1,-3,-1,-3,-2, 0,-3,-2, 1, 0,-1, 2, 5,-2, 0,-2, 0,-1,-1,-1, 0, 1,-1,-1,-1,-1 },
		/* N */{ -2, 3,-3, 1, 0,-3, 0, 1,-3, 0, 0,-3,-2, 6, 0,-2, 0, 0, 1, 0, 0,-3,-4,-1,-2, 0 },
		/* O */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		/* P */{ -1,-2,-3,-1,-1,-4,-2,-2,-3, 0,-1,-3,-2,-2, 0, 7,-1,-2,-1,-1, 0,-2,-4,-2,-3,-1 },
		/* Q */{ -1, 0,-3, 0, 2,-3,-2, 0,-3, 0, 1,-2, 0, 0, 0,-1, 5, 1, 0,-1, 0,-2,-2,-1,-1, 3 },
		/* R */{ -1,-1,-3,-2, 0,-3,-2, 0,-3, 0, 2,-2,-1, 0, 0,-2, 1, 5,-1,-1, 0,-3,-3,-1,-2, 0 },
		/* S */{ 1, 0,-1, 0, 0,-2, 0,-1,-2, 0, 0,-2,-1, 1, 0,-1, 0,-1, 4, 1, 0,-2,-3, 0,-2, 0 },
		/* T */{ 0,-1,-1,-1,-1,-2,-2,-2,-1, 0,-1,-1,-1, 0, 0,-1,-1,-1, 1, 5, 0, 0,-2, 0,-2,-1 },
		/* U */{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
		/* V */{ 0,-3,-1,-3,-2,-1,-3,-3, 3, 0,-2, 1, 1,-3, 0,-2,-2,-3,-2, 0, 0, 4,-3,-1,-1,-2 },
		/* W */{ -3,-4,-2,-4,-3, 1,-2,-2,-3, 0,-3,-2,-1,-4, 0,-4,-2,-3,-3,-2, 0,-3,11,-2, 2,-3 },
		/* X */{ 0,-1,-2,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-2,-1,-1, 0, 0, 0,-1,-2,-1,-1,-1 },
		/* Y */{ -2,-3,-2,-3,-2, 3,-3, 2,-1, 0,-2,-1,-1,-2, 0,-3,-1,-2,-2,-2, 0,-1, 2,-1, 7,-2 },
		/* Z */{ -1, 1,-3, 1, 4,-3,-2, 0,-3, 0, 1,-3,-1, 0, 0,-1, 3, 0, 0,-1, 0,-2,-3,-1,-2, 4 } };
	return sd[t][m];
}
//计算数组的值
int Max(int i, int j) {
	if (max[i][j]!=32767)
	{
		return 0;
	}
	if (i == 0) {
		max[i][j] = j*-8;
		return 0;
	}
	else if (j == 0) {
		max[i][j] = i*-8;
		return 0;
	}
	int ma1 = 9999;
	int ma2 = 9999;
	int ma3 = 9999;
	if (max[i - 1][j - 1] == 32767) {
		Max(i - 1, j - 1);
	}
	ma1 = max[i - 1][j - 1] + s(i, j);
	int temp=0;
	for (int i1 = 0; i1 < i; i1++)
	{
		if (max[i1][j] == 32767) {
			Max(i1,j);
		}
		if(max[i1][j]>temp)
		temp = max[i1][j];
	}
	ma2 = temp - 8;
	int temp3 = 0;
	for (int j2 = 0; j2 < j; j2++) {
		if (max[i][j2]==32767)
		{
			Max(i, j2);
		}
		if (max[i][j2]>temp3)
		{
			temp3 = max[i][j2];
		}
		ma3 = temp3 - 8;
	}
	int z = (ma1>ma2 ? (ma1 >ma3 ? ma1 : ma3) : (ma3 >ma2 ? ma3 : ma2));
	max[i][j] = z;
	return 0;
}
void out(int dimsion,int row) {
	
		for (int j = 0; j <dimsion; j++)
		{
			printf("%d\t", max[row][j]);
		}
		printf("\n");
	
}
int main(int argc,char *argv[])
{
	int size;
	int rank;
	MPI_Init(NULL,NULL);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD,&size);
	double start = MPI_Wtime();
	 char dimsion=*argv[1];
	char rows=*argv[2];
	printf("%s\n dimsion",dimsion);
	printf("%s\n row",rows);
	int dims=(int)dimsion;
    int row=(int)rows;
	int s = dims;
	max = new int*[s];
	for (int i = 0; i <s; i++)
	{
		max[i] = new int[s];	
		for (int  j = 0; j < s; j++)
		{
			max[i][j] =32767;
		}
	}
	for (int i = rank; i<s; i+=size)
	{
		for (int  j = rank; j <s; j+=size)
		{
			Max(i, j);
		}
	}
	if(rank==0)
	{
		out(dims,row);
		double end = MPI_Wtime();
		printf("花费时间是%f", end - start);
	}
	
MPI_Finalize();
    return 0;
}
